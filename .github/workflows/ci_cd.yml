name: Django CI - Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    name: Build, Lint and Test # Job principal pour la construction, le linting et les tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # Étape 1: Récupérer le code source du dépôt
        uses: actions/checkout@v3

      - name: Set up Python # Étape 2: Configurer l'environnement Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies # Étape 3: Installer les dépendances Python du projet
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect Static Files # Étape 4: Collecter les fichiers statiques Django
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          python manage.py collectstatic --noinput

      - name: Lint with Flake8 # Étape 5: Analyser le code avec Flake8 pour le style et les erreurs
        run: |
          flake8 . --count --show-source --statistics

      - name: Run tests with Pytest and Coverage # Étape 6: Exécuter les tests avec Pytest et vérifier la couverture
        env:
          DJANGO_SETTINGS_MODULE: oc_lettings_site.settings
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          pytest --cov=. --cov-fail-under=80 --ignore=env

  deploy:
    name: Build, Push Docker Image and Deploy to Render # Job pour construire, publier l'image Docker et déployer sur Render
    runs-on: ubuntu-latest
    needs: build-and-test # Condition: ce job s'exécute après la réussite de 'build-and-test'
    if: github.ref == 'refs/heads/master' # Condition: uniquement sur push vers la branche master

    steps:
      - name: Checkout code # Étape 1 (pour deploy): Récupérer le code source du dépôt
        uses: actions/checkout@v3

      - name: Set up Docker Buildx # Étape 2 (pour deploy): Configurer Docker Buildx pour la construction d'images
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub # Étape 3 (pour deploy): Se connecter à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image # Étape 4 (pour deploy): Construire l'image Docker et la pousser sur Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/oc-lettings:${{ github.sha }}

      - name: Trigger Render Deploy # Étape 5 (pour deploy): Déclencher le déploiement sur Render via un webhook
        id: render_deploy
        if: success()
        run: curl -X POST ${{ secrets.RENDER_WEBHOOK }}